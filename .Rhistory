yvec.st <- yvec[-c(predt*(1:length(net$edges)))]
if(is.vector(dmat.st)){
dmat.st <- as.matrix(dmat.st, ncol=1)
}
if(is.vector(dmat.pred)){
dmat.pred <- as.matrix(dmat.pred, ncol=1)
}
if(sum(is.na(yvec.st))>0){
yvec2.st <- yvec.st[!is.na(yvec.st)]
dmat2.st <- dmat.st[!is.na(yvec.st),]
modNoIntercept <- lm(yvec2.st~dmat2.st+0)
}else{
modNoIntercept <- lm(yvec.st~dmat.st+0)
}
#use only significant parameters in fit
coef.locs <- function(mod){
pvs <- summary(mod)$coefficients[,4] < 0.05
return(pvs)
}
use.coef <- coef.locs(modNoIntercept)
dmat.pred <- dmat.pred[,!is.na(modNoIntercept$coefficients)]
if(is.vector(dmat.pred)){
dmat.pred <- matrix(dmat.pred, ncol=1)
pred <- t(dmat.pred[,use.coef]) * summary(modNoIntercept)$coefficients[use.coef,1]
}else{
if(sum(use.coef)==1){
pred <- t(dmat.pred[,use.coef]) * summary(modNoIntercept)$coefficients[use.coef,1]
}else{
pred <- dmat.pred[,use.coef] %*% summary(modNoIntercept)$coefficients[use.coef,1]
}
}
out <- list(pred=c(pred), mod=modNoIntercept, ys=yvec.st, ds=dmat.st, ypred=yvec.pred, dpred=dmat.pred, frbic=frbic)
class(out) <- "GNARfit"
return(out)
}
system.time(GNARpredict())
system.time(GNARpredict())
system.time(GNARpredict())
1.1<=1
1<=1
set.seed(0.6)
?set.seed
seedToNet <- function(seed.no, nnodes=34, graph.prob=0.5){
stopifnot(floor(nnodes)==nnodes)
stopifnot(graph.prob <= 1)
stopifnot(graph.prob >= 0)
stopifnot(floor(seed.no)==seed.no)
set.seed(seed.no)
tmp.mat <- matrix(0, nrow=nnodes, ncol=nnodes)
for(ii in 1:(nnodes-1)){
for(jj in (ii+1):(nnodes)){
tmp.mat[ii,jj] <- tmp.mat[jj,ii] <- rbinom(1, n=1, p=graph.prob)
}
}
net.out <- matrixToNet(tmp.mat)
return(net.out)
}
seedToNet
seedToNet()
seedToNet(10)
seedToNet(10, nnodes=1)
seedToNet <- function(seed.no, nnodes=34, graph.prob=0.5){
stopifnot(floor(nnodes)==nnodes)
stopifnot(nnodes > 1)
stopifnot(graph.prob <= 1)
stopifnot(graph.prob >= 0)
stopifnot(floor(seed.no)==seed.no)
set.seed(seed.no)
tmp.mat <- matrix(0, nrow=nnodes, ncol=nnodes)
for(ii in 1:(nnodes-1)){
for(jj in (ii+1):(nnodes)){
tmp.mat[ii,jj] <- tmp.mat[jj,ii] <- rbinom(1, n=1, p=graph.prob)
}
}
net.out <- matrixToNet(tmp.mat)
return(net.out)
}
seedToNet(10, nnodes=1)
seedToNet(10, nnodes=2)
as.GNARnet <- function(obj){
if(is.igraph(obj)){
return(igraphToNet(obj))
}else{
if(is.matrix(obj)){
return(matrixToNet(obj))
}else{
net <- obj
results <- rep(0, 6)
results[1] <- is.list(net)
results[2] <- sum(names(net) == c("edges", "dist"))==2
results[3] <- length(net$edges)==length(net$dist)
if(sum(results)==3){
tmp <- 1
for(ii in 1:length(net$edges)){
tmp <- tmp + ifelse(length(net$edges[[ii]])==length(net$dist[[ii]]), 0, 1)
}
results[4] <- tmp==1
tmp2 <- seq(from=1, to=length(net$edges), by=1)
results[5] <- sum(unlist(net$edges) %in% tmp2) == length(unlist(net$edges))
if(sum(results)==5){
class(net) <- "GNARnet"
return(net)
}else{
cat("Unable to convert this object")
}
}
}
}
}
as.GNARnet(fiveNet)
names(GNARfit())
"mod" %in% names(GNARfit())
names(GNARpredict())
obj <- GNARfit()
sum(c("y","ys") %in% names(obj)))
sum(c("y","ys") %in% names(obj))
class(GNARfit()$mod)
class(GNARpredict()$mod)
names(GNARfit()$frbic)
dput(names(GNARfit()$frbic))
?in
c("nnodes", "alphas.in", "betas.in", "fact.var", "globalalpha") %in% names(obj$frbic)
is.GNARfit <- function(obj){
results <- rep(0,6)
results[1] <- "mod" %in% names(obj)
results[2] <- sum(c("y","ys") %in% names(obj))==1
results[3] <- sum(c("dd","ds") %in% names(obj))==1
results[4] <- "frbic" %in% names(obj)
results[5] <- class(obj$mod) == "lm"
results[6] <- sum(c("nnodes", "alphas.in", "betas.in",
"fact.var", "globalalpha") %in% names(obj$frbic))==5
return(sum(results)==6)
}
is.GNARfit(GNARfit())
is.GNARfit(GNARpredict())
is.GNARfit(fiveNet)
is.GNARfit(fiveVTS)
is.GNARfit <- function(obj){
results <- rep(0,6)
results[1] <- "mod" %in% names(obj)
results[2] <- sum(c("y","ys") %in% names(obj))==1
results[3] <- sum(c("dd","ds") %in% names(obj))==1
results[4] <- "frbic" %in% names(obj)
if(sum(results)==4){
results[5] <- class(obj$mod) == "lm"
results[6] <- sum(c("nnodes", "alphas.in", "betas.in",
"fact.var", "globalalpha") %in% names(obj$frbic))==5
}
return(sum(results)==6)
}
is.GNARfit(fiveVTS)
is.GNARfit(0)
is.GNARfit(fn)
?is.integer
as.GNARnet(edgeToigraph(fiveNet))
all.equal(as.GNARnet(edgeToigraph(fiveNet)),fiveNet)
?is.lm
as.lm
?as.lm
is.GNARfit(GNARfit())
is.GNARfit(GNARpredict())
GNARfit <- function(vts=fiveVTS, net=fiveNet, alphaOrder=2, betaOrder=c(1,1), fact.var=NULL,
globalalpha=TRUE, tvnets=NULL, netsstart=NULL){
#input checks
stopifnot(is.GNARnet(net))
stopifnot(dim(vts)[2] == length(net$edges))
stopifnot(alphaOrder > 0)
stopifnot(floor(alphaOrder) == alphaOrder)
stopifnot(length(betaOrder) == alphaOrder)
stopifnot(floor(betaOrder) == betaOrder)
if(!is.null(fact.var)){
stopifnot(length(fact.var) == length(net$edges))
if(sum(fact.var %in% c(0,1))!=length(fact.var)){
cat("More than two (0/1) factor variables not yet supported")
}
stopifnot(sum(fact.var %in% c(0,1))==length(fact.var))
}
stopifnot(is.matrix(vts))
if(!globalalpha){
cat("Individual alphas not yet supported")
}
stopifnot(globalalpha)
if(!is.null(tvnets)){
cat("Time-varying networks not yet supported")
}
stopifnot(is.null(tvnets))
useNofNei <- 1
#cat("Note: input net should contain distances (not weights)")
#end of input checks
frbic <- list(nnodes=length(net$edges),alphas.in=alphaOrder,betas.in=betaOrder,fact.var=fact.var,
globalalpha=globalalpha)
dmat <- GNARdesign(vts=vts, net=net, alphaOrder=alphaOrder, betaOrder=betaOrder, fact.var=fact.var,
globalalpha=globalalpha, tvnets=tvnets, netsstart=netsstart)
predt <- dim(vts)[1]-alphaOrder
yvec <- NULL
for(ii in 1:length(net$edges)){
yvec <- c(yvec, vts[((alphaOrder+1):(predt+alphaOrder)),ii])
}
if((sum(is.na(yvec))+sum(is.na(dmat)))>0){
cat("\\n")
cat("Note: NAs present - lm removes these from model")
}
if(sum(is.na(yvec))>0){
yvec2 <- yvec[!is.na(yvec)]
dmat2 <- dmat[!is.na(yvec),]
modNoIntercept <- lm(yvec2~dmat2+0)
}else{
modNoIntercept <- lm(yvec~dmat+0)
}
out <- list(mod=modNoIntercept, y=yvec, dd=dmat, frbic=frbic)
class(out) <- "GNARfit"
return(out)
}
is.GNARfit(GNARpredict())
is.GNARfit(GNARfit())
GNARdesign <- function (vts = fiveVTS, net = fiveNet, alphaOrder = 2,
betaOrder = c(1,1), fact.var = NULL, globalalpha=TRUE,
tvnets=NULL, netsstart=NULL)
{
stopifnot(is.GNARnet(net))
stopifnot(dim(vts)[2] == length(net$edges))
stopifnot(alphaOrder > 0)
stopifnot(floor(alphaOrder) == alphaOrder)
stopifnot(length(betaOrder) == alphaOrder)
stopifnot(floor(betaOrder) == betaOrder)
if(!is.null(fact.var)){
stopifnot(length(fact.var) == length(net$edges))
if(sum(fact.var %in% c(0,1))!=length(fact.var)){
cat("More than two (0/1) factor variables not yet supported")
}
stopifnot(sum(fact.var %in% c(0,1))==length(fact.var))
}
stopifnot(is.matrix(vts))
if(!globalalpha){
cat("Individual alphas not yet supported")
}
stopifnot(globalalpha)
if(!is.null(tvnets)){
cat("Time-varying networks not yet supported")
}
stopifnot(is.null(tvnets))
useNofNei <- 1
#cat("Note: input net should contain distances (not weights)")
parNames <- parLoc <- NULL
for (jj in 1:alphaOrder) {
parNames <- c(parNames, paste("alpha", jj, sep = ""))
parLoc <- c(parLoc, "a")
if (betaOrder[jj] > 0) {
for (kk in 1:betaOrder[jj]) {
parNames <- c(parNames, paste("beta", jj, ".",
kk, sep = ""))
parLoc <- c(parLoc, "b")
}
}
}
maxOrder <- alphaOrder
predt <- dim(vts)[1] - maxOrder
nnodes <- dim(vts)[2]
dmat <- matrix(0, nrow = predt * nnodes, ncol = sum(c(alphaOrder,
betaOrder)), dimnames = list(NULL, parNames))
for (ii in 1:nnodes) {
for (aa in 1:alphaOrder) {
alphaLoc <- which(parLoc == "a")[aa]
dmat[((predt * (ii - 1) + 1):(predt * ii)), alphaLoc] <- vts[((maxOrder +
1 - aa):(predt + (maxOrder - aa))), ii]
}
}
if (sum(betaOrder) > 0) {
betaTimes <- betaN <- NULL
for (jj in 1:alphaOrder) {
betaTimes <- c(betaTimes, rep(jj, betaOrder[jj]))
if (betaOrder[jj] > 0) {
betaN <- c(betaN, 1:betaOrder[jj])
}
}
for (ii in 1:nnodes) {
if (useNofNei) {
NofNei <- NofNeighbours(node = ii, stage = max(betaOrder),
net = net)
Nei <- NofNei$edges
Wei <- NofNei$dist
if ((!is.null(Nei)) & (length(Nei) > 0)) {
if (!is.null(Nei[[1]])) {
for (jj in 1:length(Wei)) {
inv.dist <- 1/Wei[[jj]]
Wei[[jj]] <- inv.dist/sum(inv.dist)
}
for (bb in 1:sum(betaOrder)) {
betaLoc <- which(parLoc == "b")[bb]
if (length(Nei[[betaN[bb]]]) > 1) {
#print(paste("node", ii, "betaN[bb]", betaN[bb]))
#print("In length(Nei[[betaN[bb]]]) > 1")
vts.cut <- vts[((maxOrder + 1 - betaTimes[bb]):(predt +
(maxOrder - betaTimes[bb]))), Nei[[betaN[bb]]]]
for (kk in 1:dim(vts.cut)[1]) {
if (sum(is.na(vts.cut[kk, ])) >= 1) {
if (sum(is.na(vts.cut[kk, ])) ==
dim(vts.cut)[2]) { #if there are no neighbours left at any time point, set to zero
vts.cut[kk, ] <- 0
}
else {
new.wei <- Wei[[betaN[bb]]][which(!is.na(vts.cut[kk,
]))]
new.wei <- new.wei/sum(new.wei)
sub.val <- vts.cut[kk, which(!is.na(vts.cut[kk,
]))] %*% new.wei
vts.cut[kk, which(is.na(vts.cut[kk,
]))] <- sub.val
}
}
}
dmat[((predt * (ii - 1) + 1):(predt *
ii)), betaLoc] <- vts.cut %*% Wei[[betaN[bb]]]
}
else {
#print(paste("node", ii, "betaN[bb]", betaN[bb]))
#print("In length(Nei[[betaN[bb]]]) > 1 else")
if ((length(Nei[[betaN[bb]]]) == 1) &
(!is.na(Nei[[betaN[bb]]]))) {
#print("In (length(Nei[[betaN[bb]]]) == 1) & (!is.na(Nei[[betaN[bb]]]))")
vts.cut <- vts[((maxOrder +
1 - betaTimes[bb]):(predt + (maxOrder -
betaTimes[bb]))), Nei[[betaN[bb]]]]
#and if this is missing at any time point, set to zero
vts.cut[is.na(vts.cut)] <- 0
dmat[((predt * (ii - 1) + 1):(predt *
ii)), betaLoc] <- vts.cut * Wei[[betaN[bb]]]
}
else {
dmat[((predt * (ii - 1) + 1):(predt *
ii)), betaLoc] <- 0
}
}
}
}
else {
for (bb in 1:sum(betaOrder)) {
betaLoc <- which(parLoc == "b")[bb]
dmat[((predt * (ii - 1) + 1):(predt * ii)),
betaLoc] <- 0
}
}
}
else {
for (bb in 1:sum(betaOrder)) {
betaLoc <- which(parLoc == "b")[bb]
dmat[((predt * (ii - 1) + 1):(predt * ii)),
betaLoc] <- 0
}
}
}
else {
NNei <- getNeighbours(net = net, nodeii = ii)
Nei <- NNei$Nei
Wei <- NNei$Wei
for (bb in 1:sum(betaOrder)) {
betaLoc <- which(parLoc == "b")[bb]
if (length(Nei) > 1) {
dmat[((predt * (ii - 1) + 1):(predt * ii)),
betaLoc] <- vts[((maxOrder + 1 - betaTimes[bb]):(predt +
(maxOrder - betaTimes[bb]))), Nei] %*%
Wei
}
else {
if ((length(Nei) == 1) & (!is.na(Nei))) {
dmat[((predt * (ii - 1) + 1):(predt * ii)),
betaLoc] <- vts[((maxOrder + 1 - betaTimes[bb]):(predt +
(maxOrder - betaTimes[bb]))), Nei] *
Wei
}
else {
dmat[((predt * (ii - 1) + 1):(predt * ii)),
betaLoc] <- 0
}
}
}
}
}
}
if (is.null(fact.var)) {
return(dmat)
}
else {
dmcol <- dim(dmat)[2]
dmat2 <- cbind(dmat, dmat)
dmat2[fact.var == 1, (1:dmcol)] <- 0
dmat2[fact.var == 0, (dmcol + (1:dmcol))] <- 0
dimnames(dmat2)[[2]] <- c(dimnames(dmat)[[2]], paste(dimnames(dmat)[[2]],
"F"))
return(dmat2)
}
}
is.GNARfit(GNARfit())
is.GNARfit(GNARpredict())
library(GNAR)
rm(list=ls())
is.GNARfit(GNARpredict())
is.GNARfit(GNARfit())
?is.GNARnet
?is.GNARfit
lmToBIC <- function(GNARobj.in=GNARpredict()){
stopifnot(is.GNARfit(GNARobj.in))
nnodes.in <- GNARobj.in$frbic$nnodes
alphas.in <- GNARobj.in$frbic$alphas.in
betas.in <- GNARobj.in$frbic$betas.in
fact.var <- GNARobj.in$frbic$fact.var
globalalpha <- GNARobj.in$frbic$globalalpha
if(!is.null(fact.var)){
cat("Factors not currently supported")
}
stopifnot(is.null(fact.var))
if(!globalalpha){
cat("Individual alphas not currently supported")
}
stopifnot(globalalpha)
tmp.resid <- residToMat(GNARobj=GNARobj.in, nnodes=nnodes.in)$resid
tmp.resid[is.na(tmp.resid)] <- 0 #shouldn't make a difference when comparing across p, s
tmp1 <- log(det((1/dim(tmp.resid)[1]) * t(tmp.resid) %*% tmp.resid))
tot.time <- dim(tmp.resid)[1] + alphas.in
tmp2 <- ( dim(tmp.resid)[2] * alphas.in + sum(betas.in) ) * log(tot.time) / tot.time
return(tmp1 + tmp2)
}
lmToBIC()
lmToBIC(GNARfit$mod)
names(GNARfit()$mod)
lmToBIC(GNARfit()$mod)
lmToBIC <- function(GNARobj.in=GNARpredict()){
stopifnot(is.GNARfit(GNARobj.in))
nnodes.in <- GNARobj.in$frbic$nnodes
alphas.in <- GNARobj.in$frbic$alphas.in
betas.in <- GNARobj.in$frbic$betas.in
fact.var <- GNARobj.in$frbic$fact.var
globalalpha <- GNARobj.in$frbic$globalalpha
if(!is.null(fact.var)){
cat("Factors not currently supported")
}
stopifnot(is.null(fact.var))
if(!globalalpha){
cat("Individual alphas not currently supported")
}
stopifnot(globalalpha)
stopifnot(length(nnodes.in)==1)
stopifnot(floor(nnodes.in)==nnodes.in)
tmp.resid <- residToMat(GNARobj=GNARobj.in, nnodes=nnodes.in)$resid
tmp.resid[is.na(tmp.resid)] <- 0 #shouldn't make a difference when comparing across p, s
tmp1 <- log(det((1/dim(tmp.resid)[1]) * t(tmp.resid) %*% tmp.resid))
tot.time <- dim(tmp.resid)[1] + alphas.in
tmp2 <- ( dim(tmp.resid)[2] * alphas.in + sum(betas.in) ) * log(tot.time) / tot.time
return(tmp1 + tmp2)
}
lmToBIC(GNARfit()$mod)
lmToBIC(GNARfit())
lmToBIC(GNARfit())
lmToBIC(GNARfit())
lmToBIC(GNARpredict())
residToMat <- function(GNARobj=GNARpredict(), nnodes=5){
#allow either a fit or a predict output here
#fit will have $y, predict will have $ys components
stopifnot(floor(nnodes)==nnodes)
stopifnot(is.GNARfit(GNARobj))
if(is.null(GNARobj$ys)){
yvec <- GNARobj$y
dmat <- GNARobj$dd
}else{
yvec <- GNARobj$ys
dmat <- GNARobj$ds
}
resid.gaps <- rep(0, length(yvec))
resid.gaps[is.na(yvec)] <- 1
resid.gaps[na.row(dmat)] <- 1
resid.with.gaps <- rep(NA, length=length(yvec))
resid.with.gaps[!resid.gaps] <- GNARobj$mod$residuals
fit.with.gaps <- rep(NA, length=length(yvec))
fit.with.gaps[!resid.gaps] <- GNARobj$mod$fitted
resid.matrix <- matrix(resid.with.gaps,  ncol=nnodes, byrow=FALSE)
fitted.matrix <- matrix(fit.with.gaps, ncol=nnodes, byrow=FALSE)
return(list(resid=resid.matrix, fit=fitted.matrix))
}
residToMat()
library(wavethresh)
install.packages("roxygen2")
library(roxygen2)
?roxygen2
vignette("namespace", package = "roxygen2")
vignette("rd", package = "roxygen2")
?as.dist
?is.mts
?plot.acf
library(GNAR)
?GNAR
library(GNAR)
?fiveVTS
library(GNAR)
?fiveNode
data("fiveNode")
plot(fiveNet)
image(fiveVTS)
GNARfit()
summary(GNARfit())
summary(GNARpredict())
?summary.GNARfit
fiveNet()
GNARfit()
library(GNAR)
rm(list=ls())
?edgeToigraph
data(fiveNode)
edgeToigraph()
?GNAR
?GNARfit
library(GNAR)
library(GNAR)
